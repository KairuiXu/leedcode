There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.


class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
	        int l1=nums1.length,l2=nums2.length;
	        int m =(l1+l2)%2==1?(l1+l2)/2+1:(l1+l2)/2;
	        if(l1<l2){
	            int[] temp = nums2;
	            nums2 = nums1;
	            nums1 = temp;
	            int t = l2;
	            l2 = l1;
	            l1 = t;
	        }
	        if(l2==0)
	            return l1%2==1?nums1[l1/2]:(float)(nums1[l1/2-1]+nums1[l1/2])/2;	        	
	        int i = l1/2;
	        while(!check(nums1,nums2,i,m)){
	            if(m-i-1>=0 && nums2[m-i-1]>nums1[i])
	                i++;
	            else 
	                i--;
	        }
	        return (l1+l2)%2==1?Math.max((i-1>=0?nums1[i-1]:Integer.MIN_VALUE),(m-i-1>=0 && m-i-1<l2?nums2[m-i-1]:Integer.MIN_VALUE)):(float)
	        	(Math.max((i-1>=0?nums1[i-1]:Integer.MIN_VALUE),(m-i-1>=0&&m-i-1<l2?nums2[m-i-1]:Integer.MIN_VALUE))+Math.min((i<l1?nums1[i]:Integer.MAX_VALUE),(m-i>=0&&m-i<l2?nums2[m-i]:Integer.MAX_VALUE)))/2;
	        
	    }

	 public static boolean check(int[] nums1, int[] nums2,int i,int m) {
		 if(m-i==nums2.length) {
			 if(nums2[nums2.length-1]<=nums1[i])
				 return true;
			 else return false;
		 }
		 else if(m-i==0) {
			 if(nums1[i-1]<=nums2[0])
				 return true;
			 else return false;
		 }
		 else {
			 if(Math.max(nums1[i-1],nums2[m-i-1])<=Math.min(nums1[i],nums2[m-i]))
				 return true;
			 else return false;
		 }
	 }

}
