Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean longenough(ListNode head, int k){
        if(head == null)
            return false;
        if(k==1)
            return head!=null;
        else return(longenough(head.next,k-1));
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        if(k==1)
            return head;
        if(!longenough(head,k))
            return head;
        ListNode p0 = head;
        ListNode p1 = null;
        ListNode p2 = head;
        ListNode p3 = head.next;
        for(int i=0;i<k-1;i++){
            p2.next = p1;
            p1 = p2;
            p2 = p3;
            p3 = p2.next;
        }
        p2.next = p1;
        p0.next = reverseKGroup(p3,k); 
        return p2;

    }
}
