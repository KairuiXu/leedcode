You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their
nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        return addspeedup(l1,l2,0);
    }
    public ListNode addspeedup(ListNode l1, ListNode l2, int carry){
        if(l1==null && l2==null)
            return carry==0?null:new ListNode(carry);
        int sum=(l1!=null?l1.val:0)+(l2!=null?l2.val:0)+carry;
        ListNode result = new ListNode(sum%10);
        result.next=addspeedup((l1!=null?l1.next:l1),(l2!=null?l2.next:l2),sum/10);
        return result;
    }
}
